// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_PRISMA_URL") // uses connection pooling
  directUrl = env("DATABASE_URL_NON_POOLING") // uses a direct connection
}

model User {
  id                  Int               @id @default(autoincrement())
  chipId              String            @unique
  email               String            @unique
  displayName         String
  encryptionPublicKey String
  signaturePublicKey  String
  wantsServerCustody  Boolean
  passwordSalt        String?
  passwordHash        String?
  twitterUsername     String?
  telegramUsername    String?
  createdAt           DateTime          @default(now())
  sentMessages        Message[]         @relation("MessageSender")
  receivedMessages    Message[]         @relation("MessageRecipient")
  questRequirements   UserRequirement[] @relation("UserQuestRequirements")
}

model LocationKey {
  id                  Int      @id @default(autoincrement())
  locationId          Int      @unique
  signaturePrivateKey String
  createdAt           DateTime @default(now())
  location            Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
}

model Location {
  id                  Int                   @id @default(autoincrement())
  chipId              String                @unique
  signaturePublicKey  String                
  name                String
  description         String
  sponsor             String
  imageUrl            String
  createdAt           DateTime              @default(now())
  signaturePrivateKey LocationKey?          @relation
  questRequirements   LocationRequirement[] @relation("LocationQuestRequirements")
}

model SigninCode {
  id                Int       @id @default(autoincrement())
  value             String
  email             String    @unique
  usedGuessAttempts Int
  expiresAt         DateTime
  redeemedAt        DateTime?
  createdAt         DateTime  @default(now())
}

model AuthToken {
  id        Int       @id @default(autoincrement())
  value     String    @unique
  userId    Int
  expiresAt DateTime
  revokedAt DateTime?
  createdAt DateTime  @default(now())
}

model Backup {
  id                Int      @id @default(autoincrement())
  userId            Int
  encryptedData     String
  authenticationTag String
  iv                String
  isServerEncrypted Boolean
  createdAt         DateTime @default(now())
}

model Message {
  id            Int      @id @default(autoincrement())
  senderId      Int
  recipientId   Int
  encryptedData String
  createdAt     DateTime @default(now())
  sender        User     @relation(name: "MessageSender", fields: [senderId], references: [id])
  recipient     User     @relation(name: "MessageRecipient", fields: [recipientId], references: [id])
}

model Quest {
  id                   Int                   @id @default(autoincrement())
  name                 String
  description          String
  sponsor              String?
  imageUrl             String?
  summonId             String?               @unique
  buidlReward          Int
  createdAt            DateTime              @default(now())
  userRequirements     UserRequirement[]
  locationRequirements LocationRequirement[]
}

model UserRequirement {
  id              Int      @id @default(autoincrement())
  name            String
  questId         Int
  userIds         Int[]
  numSigsRequired Int
  createdAt       DateTime @default(now())
  quest           Quest    @relation(fields: [questId], references: [id])
  users           User[]   @relation("UserQuestRequirements")
}

model LocationRequirement {
  id              Int        @id @default(autoincrement())
  name            String
  questId         Int
  locationIds     Int[]
  numSigsRequired Int
  createdAt       DateTime   @default(now())
  quest           Quest      @relation(fields: [questId], references: [id])
  locations       Location[] @relation("LocationQuestRequirements")
}
