// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_PRISMA_URL") // uses connection pooling
  directUrl = env("DATABASE_URL_NON_POOLING") // uses a direct connection
}

model User {
  id                        Int                @id @default(autoincrement())
  chipId                    String             @unique
  email                     String             @unique
  displayName               String
  encryptionPublicKey       String
  signaturePublicKey        String
  wantsServerCustody        Boolean
  allowsAnalytics           Boolean
  passwordSalt              String?
  passwordHash              String?
  createdAt                 DateTime           @default(now())
  sentMessages              Message[]          @relation("MessageSender")
  receivedMessages          Message[]          @relation("MessageRecipient")
  questRequirements         UserRequirement[]  @relation("UserQuestRequirements")
  sentBenchmarkMessages     BenchmarkMessage[] @relation("BenchmarkMessageSender")
  receivedBenchmarkMessages BenchmarkMessage[] @relation("BenchmarkMessageRecipient")
  questProofs               QuestProof[]       @relation("QuestProofUser")
  qrCodes                   QrCode[]           @relation("QrCodeUser")
  admin                     Admin?
}

model Admin {
  id           Int      @id @default(autoincrement())
  userId       Int      @unique
  isSuperAdmin Boolean  @default(false)
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id])
}

model LocationKey {
  id                  Int      @id @default(autoincrement())
  locationId          Int      @unique
  signaturePrivateKey String
  numPreviousTaps     Int      @default(0)
  createdAt           DateTime @default(now())
  location            Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
}

model Location {
  id                     Int                   @id @default(autoincrement())
  chipId                 String                @unique
  signaturePublicKey     String
  name                   String
  description            String
  sponsor                String
  imageUrl               String
  displayEmailWalletLink Boolean               @default(false)
  createdAt              DateTime              @default(now())
  signaturePrivateKey    LocationKey?          @relation
  questRequirements      LocationRequirement[] @relation("LocationQuestRequirements")
}

model SigninCode {
  id                Int       @id @default(autoincrement())
  value             String
  email             String    @unique
  usedGuessAttempts Int
  expiresAt         DateTime
  redeemedAt        DateTime?
  createdAt         DateTime  @default(now())
}

model AuthToken {
  id        Int       @id @default(autoincrement())
  value     String    @unique
  userId    Int
  expiresAt DateTime
  revokedAt DateTime?
  createdAt DateTime  @default(now())
}

model Backup {
  id                Int      @id @default(autoincrement())
  userId            Int
  encryptedData     String
  authenticationTag String
  iv                String
  isServerEncrypted Boolean
  createdAt         DateTime @default(now())
}

model Message {
  id            Int      @id @default(autoincrement())
  senderId      Int
  recipientId   Int
  encryptedData String
  createdAt     DateTime @default(now())
  sender        User     @relation(name: "MessageSender", fields: [senderId], references: [id])
  recipient     User     @relation(name: "MessageRecipient", fields: [recipientId], references: [id])
}

model Quest {
  id                   Int                   @id @default(autoincrement())
  name                 String
  description          String
  sponsor              String?
  imageUrl             String?
  summonId             String?               @unique
  buidlReward          Int
  createdAt            DateTime              @default(now())
  userRequirements     UserRequirement[]
  locationRequirements LocationRequirement[]
  proofs               QuestProof[]          @relation("QuestForProof")
  requiredForItems     Item[]                @relation("ItemQuestRequirements")
}

model UserRequirement {
  id                     Int      @id @default(autoincrement())
  name                   String
  questId                Int
  userIds                Int[]
  numSigsRequired        Int
  sigNullifierRandomness String // Used to prevent signatures from being used in multiple proofs
  createdAt              DateTime @default(now())
  quest                  Quest    @relation(fields: [questId], references: [id])
  users                  User[]   @relation("UserQuestRequirements")
}

model LocationRequirement {
  id                     Int        @id @default(autoincrement())
  name                   String
  questId                Int
  locationIds            Int[]
  numSigsRequired        Int
  sigNullifierRandomness String // Used to prevent signatures from being used in multiple proofs
  createdAt              DateTime   @default(now())
  quest                  Quest      @relation(fields: [questId], references: [id])
  locations              Location[] @relation("LocationQuestRequirements")
}

// Mirrors the Message model, but only used for benchmarking
model BenchmarkMessage {
  id            Int      @id @default(autoincrement())
  benchmarkId   Int // Used to identify messages during benchmarking
  senderId      Int
  recipientId   Int
  encryptedData String
  createdAt     DateTime @default(now())
  sender        User     @relation(name: "BenchmarkMessageSender", fields: [senderId], references: [id])
  recipient     User     @relation(name: "BenchmarkMessageRecipient", fields: [recipientId], references: [id])
}

model QuestProof {
  id              String   @id @default(uuid())
  questId         Int
  userId          Int
  serializedProof String
  createdAt       DateTime @default(now())
  quest           Quest    @relation(name: "QuestForProof", fields: [questId], references: [id])
  user            User     @relation(name: "QuestProofUser", fields: [userId], references: [id])

  @@unique([questId, userId])
}

model Item {
  id                  Int      @id @default(autoincrement())
  name                String
  sponsor             String
  description         String
  imageUrl            String
  buidlCost           Int
  questRequirementIds Int[]
  createdAt           DateTime @default(now())
  questRequirements   Quest[]  @relation("ItemQuestRequirements")
  qrCodes             QrCode[] @relation("QrCodeItem")
}

model QrCode {
  id        String   @id @default(uuid())
  itemId    Int
  userId    Int
  redeemed  Boolean  @default(false)
  createdAt DateTime @default(now())
  item      Item     @relation(name: "QrCodeItem", fields: [itemId], references: [id])
  user      User     @relation(name: "QrCodeUser", fields: [userId], references: [id])

  @@unique([itemId, userId])
}

model EmailWalletMint {
  id         Int      @id @default(autoincrement())
  userId     Int
  locationId Int
  sigHash    String
  createdAt  DateTime @default(now())
}

model CmacChipRegistration {
  id             Int      @id @default(autoincrement())
  chipId         String
  isLocationChip Boolean
  createdAt      DateTime @default(now())
}